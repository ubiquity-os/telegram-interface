# =============================================================================
# TELEGRAM BOT DUAL DEPLOYMENT CONFIGURATION
# =============================================================================
# This file contains all environment variables needed for the Telegram bot's
# dual deployment system with separate production and preview environments.
#
# IMPORTANT: Never put real tokens in this file - use GitHub repository secrets!
# Copy this file to .env and fill with your actual values for local development.
#
# Setup Guide: docs/github-secrets-setup.md

# =============================================================================
# BOT CONFIGURATION
# =============================================================================

# Bot deployment type - determines which bot token and webhook secret to use
# Values: "production" | "preview"
# - production: Uses BOT_TOKEN and WEBHOOK_SECRET_PRODUCTION
# - preview: Uses PREVIEW_BOT_TOKEN and WEBHOOK_SECRET_PREVIEW
BOT_TYPE=production

# Production Telegram bot token (used when BOT_TYPE=production)
# Get from @BotFather on Telegram
# Format: 1234567890:ABCdefGHIjklMNOpqrSTUvwxYZ
BOT_TOKEN=your_production_bot_token_here

# Preview Telegram bot token (used when BOT_TYPE=preview)
# Get from @BotFather on Telegram - should be a separate bot for testing
# Format: 1234567890:ABCdefGHIjklMNOpqrSTUvwxYZ
PREVIEW_BOT_TOKEN=your_preview_bot_token_here

# =============================================================================
# WEBHOOK CONFIGURATION
# =============================================================================

# Production webhook secret (used with production bot)
# Generate a random string for security - used to validate webhook requests
# Example generation: openssl rand -hex 32
WEBHOOK_SECRET_PRODUCTION=generate_random_string_here

# Preview webhook secret (used with preview bot)
# Generate a different random string from production
# Example generation: openssl rand -hex 32
WEBHOOK_SECRET_PREVIEW=generate_different_random_string_here

# Legacy webhook secret (backward compatibility fallback)
# Used if environment-specific secrets are not available
WEBHOOK_SECRET=generate_random_string_here

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

# Deno Deploy API token (required for automatic webhook setup)
# Get from Deno Deploy dashboard â†’ Account Settings â†’ Access Tokens
# Format: ddp_1234567890abcdef...
DENO_DEPLOY_TOKEN=your_deno_deploy_token_here

# Deno Deploy project name (optional - defaults to "telegram-interface")
# Only needed if your project name differs from the default
DENO_PROJECT_NAME=telegram-interface

# Manual deployment URL override (optional)
# Used for custom domains or manual URL specification
# Format: https://your-custom-domain.com or https://your-project-name.deno.dev
DEPLOYMENT_URL=https://your-project-name.deno.dev

# =============================================================================
# AI SERVICE CONFIGURATION
# =============================================================================

# OpenRouter API key for AI response generation
# Get from https://openrouter.ai/keys
# Format: sk-or-v1-abc123def456ghi789...
OPENROUTER_API_KEY=your_openrouter_api_key_here

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Application runtime environment
# Values: "development" | "production"
# - development: Enhanced logging, local development features
# - production: Optimized for production deployment
ENVIRONMENT=development

# Logging verbosity level
# Values: "debug" | "info" | "error"
# - debug: Detailed logging including request/response data
# - info: Standard operational logging
# - error: Only error conditions
LOG_LEVEL=info

# =============================================================================
# DUAL DEPLOYMENT WORKFLOW
# =============================================================================
#
# This configuration supports automatic dual deployment:
#
# ðŸ“± PRODUCTION DEPLOYMENT (main branch):
#    â”œâ”€â”€ Uses: BOT_TOKEN + WEBHOOK_SECRET_PRODUCTION
#    â”œâ”€â”€ Deploys to: https://telegram-interface.deno.dev
#    â””â”€â”€ Triggered by: Push to main branch
#
# ðŸ§ª PREVIEW DEPLOYMENT (feature branches):
#    â”œâ”€â”€ Uses: PREVIEW_BOT_TOKEN + WEBHOOK_SECRET_PREVIEW  
#    â”œâ”€â”€ Deploys to: https://telegram-interface-{hash}.deno.dev
#    â””â”€â”€ Triggered by: Push to any non-main branch
#
# ðŸ§¹ CLEANUP (PR closure):
#    â””â”€â”€ Removes preview webhook when PR is closed
#
# For setup instructions, see: docs/github-secrets-setup.md
# For architecture details, see: docs/dual-deployment-architecture.md